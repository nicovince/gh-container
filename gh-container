#!/usr/bin/env bash
set -e
PKG_TYPE="container"
SCRIPT="$(realpath "$0")"

function help()
{
    cat <<EOF
Manage packages of type container posted to ghcr.io
Usage:
  gh container <command>
Commands:
  list           List packages of type container
  versions       List versions of a container package
  clean          Clean untagged versions a container package

Flags:
  -h, --help Show this help and exit
EOF
}

function help_version()
{
    cat <<EOF
List versions of a container package
Usage:
  gh container version <package name>

Flags:
  -u, --untagged     Show only versions which do not have any tags
  --tagged           Show only versions which have a tag
  --show-pkg-name    Show column with package name
  -h, --help         Show this help and exit
EOF
}

function help_browse()
{
    cat <<EOF
Browse with fzf through verion of a package
Usage:
  gh container browse <package name>
EOF
}

function help_clean()
{
    cat <<EOF
Clean a package version
Usage:
  gh container clean <package name> [<package version id>] [flags]

Flags:
  -h, --help         Show this help and exit
  -u, --untagged     Clean untagged containers versions

Examples:
  # Remove version 1234 of my-package
  gh container clean my-package 1234

  # Remove all untagged versions of my-package
  gh container clean my-package --untagged
EOF
}

HDR_ACCEPT='Accept: application/vnd.github+json'
HDR_API_VERSION='X-GitHub-Api-Version: 2022-11-28'

function get_login()
{
    gh auth status 2>&1 | grep "Logged in" | sed 's/.*as \([a-zA-Z.-_]\+\).*/\1/'
}

function delete_user_pkg_version()
{
    local username
    local pkg_name
    local pkg_version

    username="$1"
    pkg_name="$2"
    pkg_version="$3"

    gh api -H "${HDR_ACCEPT}" -H "${HDR_API_VERSION}" \
        --method DELETE \
        /users/${username}/packages/${PKG_TYPE}/${pkg_name}/versions/${pkg_version}
}

function list_packages()
{
    gh api -H "${HDR_ACCEPT}" -H "${HDR_API_VERSION}" \
        /user/packages?package_type=${PKG_TYPE} \
        --jq '.[] | .name'
}

function list_versions()
{
    local pkg_name
    local query
    local titles
    local params
    local untagged_only
    local tagged_only
    local show_pkg_name

    untagged_only=0
    tagged_only=0
    show_pkg_name=0

    while [ $# -gt 0 ]; do
        case $1 in
            -h|--help)
                help_version
                exit 0
                ;;
            -u|--untagged)
                untagged_only=1
                ;;
            --tagged)
                tagged_only=1
                ;;
            --show-pkg-name)
                show_pkg_name=1
                ;;
            *)
                params+=" $1"
                ;;
        esac
        shift
    done
    eval set -- "${params}"
    pkg_name="$1"

    if [ ${show_pkg_name} -eq 0 ]; then
        titles='["ID", "SHA256", "LAST UPDATE", "TAGS"]'
        fields='.id, .name, .updated_at, (.metadata.container.tags | join (" "))'
    else
        titles='["PKG NAME", "ID", "SHA256", "LAST UPDATE", "TAGS"]'
        fields="\"${pkg_name}\", "
        fields+='.id, .name, .updated_at, (.metadata.container.tags | join (" "))'
    fi
    if [ ${untagged_only} -eq 1 ]; then
        query="(${titles}), (.[] | select(.metadata.container.tags | length == 0) | [${fields}]) | @tsv"
    elif [ ${tagged_only} -eq 1 ]; then
        query="(${titles}), (.[] | select(.metadata.container.tags | length != 0) | [${fields}]) | @tsv"
    else
        query="(${titles}), (.[] | [${fields}]) | @tsv"
    fi

    gh api -H "${HDR_ACCEPT}" -H "${HDR_API_VERSION}" \
        /user/packages/${PKG_TYPE}/${pkg_name}/versions \
        --jq "${query}" | column -ts $'\t'
}

function get_first_arg()
{
    echo "$@" | awk '{print $1}'
}

function browse()
{
    local params
    local titles
    local fields
    local pkg_name

    while [ $# -gt 0 ]; do
        case $1 in
            -h|--help)
                help_browse
                exit 0
                ;;
            *)
                params+=" $1"
                ;;
        esac
        shift
    done
    eval set -- "${params}"
    pkg_name="$1"

    titles='["NAME", "ID"]'
    fields='[.name, .id]'
    query="(${titles}), (.[] | ${fields}) | @tsv"
    export -f list_versions
    export PKG_TYPE
    export HDR_ACCEPT
    export HDR_API_VERSION
    export FZF_DEFAULT_COMMAND="list_versions ${pkg_name} --show-pkg-name"
    fzf \
        --bind "ctrl-r:reload#${FZF_DEFAULT_COMMAND}#" \
        --bind "ctrl-x:execute#echo {} | awk '{print $2}' | xargs ${SCRIPT} clean #" \
        --bind "ctrl-x:+reload#${FZF_DEFAULT_COMMAND}#" \
        --header-lines=1
}


function clean()
{
    local params
    local username
    local pkg_name
    local pkg_version_ids
    local untagged

    untagged=0

    while [ $# -gt 0 ]; do
        case $1 in
            -h|--help)
                help_clean
                exit 0
                ;;
            -u|--untagged)
                untagged=1
                ;;
            *)
                params+=" $1"
                ;;
        esac
        shift
    done
    eval set -- "${params}"
    username="$(get_login)"
    pkg_name="$1"
    if [ -z "${pkg_name}" ]; then
        echo "Error: Missing package name"
        help_clean
        exit 1
    fi
    if [ ${untagged} -eq 0 ]; then
        pkg_version_ids="$2"
    else
        pkg_version_ids=$(list_versions --untagged "${pkg_name}" | awk '{print $1}' | sed 1d)
    fi
    for pkg_id in ${pkg_version_ids}; do
        echo "clean ${pkg_name} ${pkg_id}"
        delete_user_pkg_version "${username}" "${pkg_name}" "${pkg_id}"
    done
}

PARAMS=""
while [ $# -gt 0 ]; do
    key="$1"
    case ${key} in
        -h|--help)
            help
            exit 0
            ;;
        list|versions|clean|browse)
            ACTION="$1"
            ;;
        *)
            PARAMS+=" $1"
            ;;
    esac
    shift
    if [ -n "${ACTION}" ]; then
        break
    fi
done

if [ "${ACTION}" == "list" ]; then
    list_packages $@
elif [ "${ACTION}" == "versions" ]; then
    list_versions $@
elif [ "${ACTION}" == "clean" ]; then
    clean $@
elif [ "${ACTION}" == "browse" ]; then
    browse $@
else
    echo "Error: Unknown action"
    exit 1
fi
