#!/usr/bin/env bash
set -e
PKG_TYPE="container"

function help()
{
    cat <<EOF
Manage packages of type container posted to ghcr.io
Usage:
  gh container <command>
Commands:
  list           List packages of type container
  versions       List versions of a container package
  clean          Clean untagged versions a container package

Flags:
  -h, --help Show this help and exit
EOF
}

function help_version()
{
    cat <<EOF
List versions of a container package
Usage:
  gh container version <package name>

Flags:
  --untagged     Show only versions which do not have any tags
  --tagged       Show only versions which have a tag
  -h, --help     Show this help and exit
EOF
}

function help_clean()
{
    cat <<EOF
Clean a package version
Usage:
  gh container clean <package name> <package version id>
Flags:
  -h, --help     Show this help and exit
EOF
}

HDR_ACCEPT='Accept: application/vnd.github+json'
HDR_API_VERSION='X-GitHub-Api-Version: 2022-11-28'

function list_packages()
{
    gh api -H "${HDR_ACCEPT}" -H "${HDR_API_VERSION}" \
        /user/packages?package_type=${PKG_TYPE} \
        --jq '.[] | .name'
}

function clean()
{
    local params
    local pkg_name
    local pkg_version_id

    while [ $# -gt 0 ]; do
        case $1 in
            -h|--help)
                help_clean
                exit 0
                ;;
            *)
                params+=" $1"
                ;;
        esac
        shift
    done
    eval set -- "${params}"
    pkg_name="$1"
    pkg_version_id="$2"
    echo "clean ${pkg_name} ${pkg_version_id}"
    echo gh api -H "${HDR_ACCEPT}" -H "${HDR_API_VERSION}" \
        --method DELETE \
        /users/USERNAME/packages/PACKAGE_TYPE/PACKAGE_NAME/versions/PACKAGE_VERSION_ID
}

function list_versions()
{
    local pkg_name
    local query
    local titles
    local params
    local untagged_only
    local tagged_only

    untagged_only=0
    tagged_only=0

    while [ $# -gt 0 ]; do
        case $1 in
            -h|--help)
                help_version
                exit 0
                ;;
            --untagged)
                untagged_only=1
                ;;
            --tagged)
                tagged_only=1
                ;;
            *)
                params+=" $1"
                ;;
        esac
        shift
    done
    eval set -- "${params}"
    pkg_name="$1"

    titles='["ID", "SHA256", "LAST UPDATE", "TAGS"]'
    if [ ${untagged_only} -eq 1 ]; then
        query="(${titles}), (.[] | select(.metadata.container.tags | length == 0) | [.id, .name, .updated_at, (.metadata.container.tags | join(\" \"))]) | @tsv"
    elif [ ${tagged_only} -eq 1 ]; then
        query="(${titles}), (.[] | select(.metadata.container.tags | length != 0) | [.id, .name, .updated_at, (.metadata.container.tags | join(\" \"))]) | @tsv"
    else
        query="(${titles}), (.[] | [.id, .name, .updated_at, (.metadata.container.tags | join(\" \"))]) | @tsv"
    fi

    gh api -H "${HDR_ACCEPT}" -H "${HDR_API_VERSION}" \
        /user/packages/${PKG_TYPE}/${pkg_name}/versions \
        --jq "${query}" | column -ts $'\t'
}

PARAMS=""
while [ $# -gt 0 ]; do
    key="$1"
    case ${key} in
        -h|--help)
            help
            exit 0
            ;;
        list|versions|clean)
            ACTION="$1"
            ;;
        *)
            PARAMS+=" $1"
            ;;
    esac
    shift
    if [ -n "${ACTION}" ]; then
        break
    fi
done

if [ "${ACTION}" == "list" ]; then
    list_packages $@
elif [ "${ACTION}" == "versions" ]; then
    list_versions $@
elif [ "${ACTION}" == "clean" ]; then
    clean $@
fi
